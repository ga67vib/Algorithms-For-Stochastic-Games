// SMG model implementing collective decision making algorithm of:
// F. Saffre and A. Simaitis. Host Selection through Collective Decision
// ACM Transactions on Autonomous and Adaptive Systems (TAAS). 2011. 
//
// Hosting site qualities and other constant model parameters should
// be adjusted directly in the model file.
//
// Aistis Simaitis 23/06/11 


smg

// number of agents
const int N = 3;

// number of sites
const int K = 3;

// number of confidence levels
const int L = 2;

// model parameters
const double Pexp;
const double eta;
const double gamma;
const double lambda;

// quality of the sites
const double Q1;
const double Q2;
const double Q3;

// confidence levels of agents
global confidence1 : [1..L];
global confidence2 : [1..L];
global confidence3 : [1..L];

// site preferences of agents
global preference1 : [0..K] init 0;
global preference2 : [0..K] init 0;
global preference3 : [0..K] init 0;


// scheduling variable
global sched : [0..N];


// non-deterministic agent definitions
player p1
	player1, [exp1], [com1]
endplayer

module player1

	// exploring sites
	[exp1] sched=1 -> 0 : true
			// -- evaluating site and changing preference with probability Pswitchxy
			  + 1/K * Pswitch1_1 : (preference1'=1) & (confidence1'=1) & (sched'=0)
			  + 1/K * (1-Pswitch1_1) : (sched'=0)
						// -- evaluating site and changing preference with probability Pswitchxy
			  + 1/K * Pswitch1_2 : (preference1'=2) & (confidence1'=1) & (sched'=0)
			  + 1/K * (1-Pswitch1_2) : (sched'=0)
						// -- evaluating site and changing preference with probability Pswitchxy
			  + 1/K * Pswitch1_3 : (preference1'=3) & (confidence1'=1) & (sched'=0)
			  + 1/K * (1-Pswitch1_3) : (sched'=0)
			;
	// communicating with other agents in the same site with probability 1-Pexp
	[com1] sched=1 & preference1!=0 -> 0 : true	
			// - trying to communicate with agent
			  + Pmeet_p1 * (preference1=preference2?1:0) : (confidence1'=inc_conf1) & (confidence2'=inc_conf2) & (sched'=0) // same site
			  + Pmeet_p1 * (preference1=preference2?0:1) * Pwin1_2 : (confidence1'=inc_conf1) & (preference2'=preference1) & (confidence2'=1) & (sched'=0) // win
			  + Pmeet_p1 * (preference1=preference2?0:1) * (1-Pwin1_2) : (confidence1'=1) & (preference1'=preference2) & (confidence2'=inc_conf2) & (sched'=0) // lose
			
						// - trying to communicate with agent
			  + Pmeet_p1 * (preference1=preference3?1:0) : (confidence1'=inc_conf1) & (confidence3'=inc_conf3) & (sched'=0) // same site
			  + Pmeet_p1 * (preference1=preference3?0:1) * Pwin1_3 : (confidence1'=inc_conf1) & (preference3'=preference1) & (confidence3'=1) & (sched'=0) // win
			  + Pmeet_p1 * (preference1=preference3?0:1) * (1-Pwin1_3) : (confidence1'=1) & (preference1'=preference3) & (confidence3'=inc_conf3) & (sched'=0) // lose
			
			;

endmodule

player p2
	player2, [exp2], [com2]
endplayer

module player2

	// exploring sites
	[exp2] sched=2 -> 0 : true
			// -- evaluating site and changing preference with probability Pswitchxy
			  + 1/K * Pswitch2_1 : (preference2'=1) & (confidence2'=1) & (sched'=0)
			  + 1/K * (1-Pswitch2_1) : (sched'=0)
						// -- evaluating site and changing preference with probability Pswitchxy
			  + 1/K * Pswitch2_2 : (preference2'=2) & (confidence2'=1) & (sched'=0)
			  + 1/K * (1-Pswitch2_2) : (sched'=0)
						// -- evaluating site and changing preference with probability Pswitchxy
			  + 1/K * Pswitch2_3 : (preference2'=3) & (confidence2'=1) & (sched'=0)
			  + 1/K * (1-Pswitch2_3) : (sched'=0)
			;
	// communicating with other agents in the same site with probability 1-Pexp
	[com2] sched=2 & preference2!=0 -> 0 : true	
			// - trying to communicate with agent
			  + Pmeet_p2 * (preference2=preference1?1:0) : (confidence2'=inc_conf2) & (confidence1'=inc_conf1) & (sched'=0) // same site
			  + Pmeet_p2 * (preference2=preference1?0:1) * Pwin2_1 : (confidence2'=inc_conf2) & (preference1'=preference2) & (confidence1'=1) & (sched'=0) // win
			  + Pmeet_p2 * (preference2=preference1?0:1) * (1-Pwin2_1) : (confidence2'=1) & (preference2'=preference1) & (confidence1'=inc_conf1) & (sched'=0) // lose
			
			// - trying to communicate with agent
			  + Pmeet_p2 * (preference2=preference3?1:0) : (confidence2'=inc_conf2) & (confidence3'=inc_conf3) & (sched'=0) // same site
			  + Pmeet_p2 * (preference2=preference3?0:1) * Pwin2_3 : (confidence2'=inc_conf2) & (preference3'=preference2) & (confidence3'=1) & (sched'=0) // win
			  + Pmeet_p2 * (preference2=preference3?0:1) * (1-Pwin2_3) : (confidence2'=1) & (preference2'=preference3) & (confidence3'=inc_conf3) & (sched'=0) // lose
			
			;

endmodule

player p3
	player3, [exp3], [com3]
endplayer

module player3

	// exploring sites
	[exp3] sched=3 -> 0 : true
			// -- evaluating site and changing preference with probability Pswitchxy
			  + 1/K * Pswitch3_1 : (preference3'=1) & (confidence3'=1) & (sched'=0)
			  + 1/K * (1-Pswitch3_1) : (sched'=0)
						// -- evaluating site and changing preference with probability Pswitchxy
			  + 1/K * Pswitch3_2 : (preference3'=2) & (confidence3'=1) & (sched'=0)
			  + 1/K * (1-Pswitch3_2) : (sched'=0)
						// -- evaluating site and changing preference with probability Pswitchxy
			  + 1/K * Pswitch3_3 : (preference3'=3) & (confidence3'=1) & (sched'=0)
			  + 1/K * (1-Pswitch3_3) : (sched'=0)
			;
	// communicating with other agents in the same site with probability 1-Pexp
	[com3] sched=3 & preference3!=0 -> 0 : true	
			// - trying to communicate with agent
			  + Pmeet_p3 * (preference3=preference1?1:0) : (confidence3'=inc_conf3) & (confidence1'=inc_conf1) & (sched'=0) // same site
			  + Pmeet_p3 * (preference3=preference1?0:1) * Pwin3_1 : (confidence3'=inc_conf3) & (preference1'=preference3) & (confidence1'=1) & (sched'=0) // win
			  + Pmeet_p3 * (preference3=preference1?0:1) * (1-Pwin3_1) : (confidence3'=1) & (preference3'=preference1) & (confidence1'=inc_conf1) & (sched'=0) // lose
			
			// - trying to communicate with agent
			  + Pmeet_p3 * (preference3=preference2?1:0) : (confidence3'=inc_conf3) & (confidence2'=inc_conf2) & (sched'=0) // same site
			  + Pmeet_p3 * (preference3=preference2?0:1) * Pwin3_2 : (confidence3'=inc_conf3) & (preference2'=preference3) & (confidence2'=1) & (sched'=0) // win
			  + Pmeet_p3 * (preference3=preference2?0:1) * (1-Pwin3_2) : (confidence3'=1) & (preference3'=preference2) & (confidence2'=inc_conf2) & (sched'=0) // lose
			
;


endmodule


// deterministic agent definitions


// formulae to increase agents' confidence levels
	
	formula inc_conf1 = confidence1=L ? L : (confidence1+1);
	formula inc_conf2 = confidence2=L ? L : (confidence2+1);
	formula inc_conf3 = confidence3=L ? L : (confidence3+1);

// formulae to compute probabilities of agents to meet

	// probability for agent to meet another agent independent of its location
	formula Pmeet_p1 = 1/(N-1);
	formula Pmeet_p2 = 1/(N-1);
	formula Pmeet_p3 = 1/(N-1);


// formulae to get qualities of agents' preferred sites
	formula Q_p1 =  preference1=1 ? Q1 : ( preference1=1 ? Q2 : (Q3) ) ;
	formula Q_p2 =  preference2=1 ? Q1 : ( preference2=1 ? Q2 : (Q3) ) ;
	formula Q_p3 =  preference3=1 ? Q1 : ( preference3=1 ? Q2 : (Q3) ) ;

// formulae for evaluating the sites (Pswitchij = prob of to switch from size i to site j).
	
	formula Pswitch1_1 = preference1=0 ? 1 : (preference1=1 ? 0 : pow(Q1, eta) / (pow(Q1, eta) + pow(Q_p1, eta)));	
	formula Pswitch1_2 = preference1=0 ? 1 : (preference1=2 ? 0 : pow(Q2, eta) / (pow(Q2, eta) + pow(Q_p1, eta)));	
	formula Pswitch1_3 = preference1=0 ? 1 : (preference1=3 ? 0 : pow(Q3, eta) / (pow(Q3, eta) + pow(Q_p1, eta)));	

	formula Pswitch2_1 = preference2=0 ? 1 : (preference2=1 ? 0 : pow(Q1, eta) / (pow(Q1, eta) + pow(Q_p2, eta)));	
	formula Pswitch2_2 = preference2=0 ? 1 : (preference2=2 ? 0 : pow(Q2, eta) / (pow(Q2, eta) + pow(Q_p2, eta)));	
	formula Pswitch2_3 = preference2=0 ? 1 : (preference2=3 ? 0 : pow(Q3, eta) / (pow(Q3, eta) + pow(Q_p2, eta)));	

	formula Pswitch3_1 = preference3=0 ? 1 : (preference3=1 ? 0 : pow(Q1, eta) / (pow(Q1, eta) + pow(Q_p3, eta)));	
	formula Pswitch3_2 = preference3=0 ? 1 : (preference3=2 ? 0 : pow(Q2, eta) / (pow(Q2, eta) + pow(Q_p3, eta)));	
	formula Pswitch3_3 = preference3=0 ? 1 : (preference3=3 ? 0 : pow(Q3, eta) / (pow(Q3, eta) + pow(Q_p3, eta)));	


// formulae for conducting tournaments

	formula Pwin1_2 = (preference2=0?1:(preference1=0?0:((pow(Q_p1, lambda) * pow(confidence1, gamma)) / 
		((pow(Q_p1, lambda) * pow(confidence1, gamma))+(pow(Q_p2, lambda) * pow(confidence2, gamma))))));
	formula Pwin1_3 = (preference3=0?1:(preference1=0?0:((pow(Q_p1, lambda) * pow(confidence1, gamma)) / 
		((pow(Q_p1, lambda) * pow(confidence1, gamma))+(pow(Q_p3, lambda) * pow(confidence3, gamma))))));

	formula Pwin2_1 = 1-Pwin1_2;
	formula Pwin2_3 = (preference3=0?1:(preference2=0?0:((pow(Q_p2, lambda) * pow(confidence2, gamma)) / 
		((pow(Q_p2, lambda) * pow(confidence2, gamma))+(pow(Q_p3, lambda) * pow(confidence3, gamma))))));

	formula Pwin3_1 = 1-Pwin1_3;
	formula Pwin3_2 = 1-Pwin2_3;


// scheduler module
// (placed at end so that player 1 == player1)

player sched
	player0
endplayer

module player0
	[] sched = 0 -> 1/N : (sched'=1)
		      + 1/N : (sched'=2)
		      + 1/N : (sched'=3)
;
endmodule


// labeling states
	
// -- formulae to generate labels
	
	// agreement on site
	formula all_prefer_1 =  preference1=1 & preference2=1 & preference3=1 ;
	formula all_prefer_2 =  preference1=2 & preference2=2 & preference3=2 ;
	formula all_prefer_3 =  preference1=3 & preference2=3 & preference3=3 ;

	// compute total confidence
	formula total_confidence =  confidence1 + confidence2 + confidence3 ;
	
	// confidence measures
	formula all_max_conf = total_confidence/N = L;
	formula half_max_conf = (( confidence1=L?1:0 + confidence2=L?1:0 + confidence3=L?1:0 )/N) >= 0.5;
		
// -- labels

	// agreement on particular sites
	label "all_prefer_1" = all_prefer_1;
	label "all_prefer_2" = all_prefer_2;
	label "all_prefer_3" = all_prefer_3;

	// all agents have max confidence
	label "all_max_conf" = all_max_conf;

	label "half_max_conf" = half_max_conf;	

	// agreement on a site
	label "decision_made" =  all_prefer_1 | all_prefer_2 | all_prefer_3 ;


// -- rewards

const int communication_cost = 10;
const int exploration_cost = 1;

// communication n costs
rewards "ncomm1"
	[com1] true : communication_cost;
endrewards
rewards "ncomm12"
	[com1] true : communication_cost;
	[com2] true : communication_cost;
endrewards
rewards "ncomm123"
	[com1] true : communication_cost;
	[com2] true : communication_cost;
	[com3] true : communication_cost;
endrewards

// communication d costs

// exploration n costs
rewards "nexpl1"
	[exp1] true : exploration_cost;
endrewards
rewards "nexpl12"
	[exp1] true : exploration_cost;
	[exp2] true : exploration_cost;
endrewards
rewards "nexpl123"
	[exp1] true : exploration_cost;
	[exp2] true : exploration_cost;
	[exp3] true : exploration_cost;
endrewards

// exploration d costs

// total n costs
rewards "ntot1"
	[exp1] true : exploration_cost;
	[com1] true : communication_cost;
endrewards
rewards "ntot12"
	[exp1] true : exploration_cost;
	[com1] true : communication_cost;
	[exp2] true : exploration_cost;
	[com2] true : communication_cost;
endrewards
rewards "ntot123"
	[exp1] true : exploration_cost;
	[com1] true : communication_cost;
	[exp2] true : exploration_cost;
	[com2] true : communication_cost;
	[exp3] true : exploration_cost;
	[com3] true : communication_cost;
endrewards

// total d costs
	
rewards "runtime"
	sched!=0 : 1;
endrewards





