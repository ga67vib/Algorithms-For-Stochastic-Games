const k;

// Rewards bounded + unbounded reward

// RESULT (k=0): 3.0+0.0
// RESULT (k=1): 3.0+0.0
// RESULT (k=2): 3.0+0.75
// RESULT (k=3): 3.0+1.5
<<p1:p2>>max=? (R{"r1"}[F s1=4] + R{"r2"}[C<=k]);

// RESULT (k=0): 0.0+3.0
// RESULT (k=1): 0.0+3.0
// RESULT (k=2): 0.5+3.0
// RESULT (k=3): 2.0+2.25
<<p1:p2>>max=? (R{"r1"}[C<=k] + R{"r2"}[F s2=4]);

// RESULT (k=0): 3.0+0.0
// RESULT (k=1): 3.0+2.25
// RESULT (k=2): 1.5+8.0
// RESULT (k=3): 3.0+0.0
<<p1:p2>>max=? (R{"r1"}[F s1=4] + R{"i2"}[I=k]);

// RESULT (k=0): 0.0+3.0
// RESULT (k=1): 3.0+2.25
// RESULT (k=2): 0.5+3.0
// RESULT (k=3): 0.0+3.0
<<p1:p2>>max=? (R{"i1"}[I=k] + R{"r2"}[F s2=4]);
